//------------------------------Product

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author LENOVO
 */

package edu.diu;
public class Product {
    private int id;
    private String name;
    private double price;

    public Product(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public Product(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    public Product() {
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    @Override
    public String toString() {
        return "Product{" + "id=" + id + ", name=" + name + ", price=" + price + '}';
    }
    
}

//--------------------ProductDao

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edu.diu;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author LENOVO
 */
public class ProductDao {

    String url = "jdbc:sqlite:store.db?busy_timeout=5000";

    String creatTablesql = "CREATE TABLE IF NOT EXISTS products(id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT,price REAL)";
    String insertsql = "INSERT INTO products(name,price) VALUES(?,?)";
    String updatesql = "UPDATE products set name=?,price=? WHERE id=?";

    public Connection getConnection() {
        Connection con = null;
        try {
            Class.forName("org.sqlite.JDBC");
            con = DriverManager.getConnection(url);
        } catch (ClassNotFoundException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        return con;
    }

    public void createTable() {

        try {
            getConnection().createStatement().execute(creatTablesql);
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }

    }

    public void insertProduct(Product p) {
        try {
            PreparedStatement ps = getConnection().prepareStatement(insertsql);
            ps.setString(1, p.getName());
            ps.setDouble(2, p.getPrice());
            ps.executeUpdate();
            ps.close();
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }

    }

    public List selectAll() {

        List<Product> products = new ArrayList();
        try {
            Statement stm = getConnection().createStatement();
            ResultSet rsm = stm.executeQuery("Select * from products");
            while (rsm.next()) {
                int id = rsm.getInt("id");
                String name = rsm.getString("name");
                double price = rsm.getDouble("price");
                products.add(new Product(id, name, price));
            }
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        return products;
    }

    public Product selectProduct(int id) {

        Product p = null;
        try {
            Statement stm = getConnection().createStatement();

            ResultSet rsm = stm.executeQuery("Select * from products where id=" + id);

            if (rsm.next()) {

                String name = rsm.getString("name");
                double price = rsm.getDouble("price");
                p = new Product(id, name, price);
            }
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        return p;
    }

    public void updateProduct(Product p) {
        try {
            PreparedStatement ps = getConnection().prepareStatement(updatesql);
            ps.setString(1, p.getName());
            ps.setDouble(2, p.getPrice());
            ps.setInt(3, p.getId());
            ps.executeUpdate();
            ps.close();
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }

    }
    
    public void deleteProduct(int id) {

        Product p = null;
        try {
            Statement stm = getConnection().createStatement();

            ResultSet rsm = stm.executeQuery("Delete from products where id=" + id);

           stm.close();
        } catch (SQLException ex) {
            System.getLogger(ProductDao.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        //return p;
    }
    
}

//-----------------ProductServelte

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package edu.diu;

import java.io.IOException;
import java.sql.*;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author LENOVO
 */
public class ProductServlete extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    
    ProductDao productDao;
    @Override
    public void init() throws ServletException {
      productDao=new ProductDao();
      productDao.createTable();
    }

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        String action = request.getParameter("action");
        if (action == null) { action = "list"; }

        try {
            switch (action) {
                case "new" -> showNewForm(request, response);
                case "insert" -> insertProduct(request, response);
                case "delete" -> deleteProduct(request, response);
                case "edit" -> showEditForm(request, response);
                case "update" -> updateProduct(request, response);
                default -> listProducts(request, response);
            }
        } catch (SQLException ex) {
            throw new ServletException(ex);
        }

    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }
    
     private void listProducts(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        List<Product> products = productDao.selectAll();
        request.setAttribute("products", products);
        request.getRequestDispatcher("/product-list.jsp").forward(request, response);
    }

    private void showNewForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/product-form.jsp").forward(request, response);
    }

     private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        Product existingProduct = productDao.selectProduct(id);
        request.setAttribute("product", existingProduct);
        request.getRequestDispatcher("/product-form.jsp").forward(request, response);
    }

       private void insertProduct(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {
        String name = request.getParameter("name");
        double price = Double.parseDouble(request.getParameter("price"));
       

        Product newProduct = new Product(0, name, price);
        productDao.insertProduct(newProduct);
        response.sendRedirect("products");
    }

    private void updateProduct(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        String name = request.getParameter("name");
        double price = Double.parseDouble(request.getParameter("price"));
      

        Product product = new Product(id, name, price);
        productDao.updateProduct(product);
        response.sendRedirect("products");
    }

    private void deleteProduct(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        productDao.deleteProduct(id);
        response.sendRedirect("products");
    }
    
    
    
    
    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

//------------------------product-form

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <title>Product Form</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h2 class="text-center">
            <c:if test="${product != null}">Edit Product</c:if>
            <c:if test="${product == null}">Add New Product</c:if>
        </h2>
        
        <form action="products" method="post">
            <c:if test="${product != null}">
                <input type="hidden" name="id" value="${product.id}">
                <input type="hidden" name="action" value="update">
            </c:if>
            <c:if test="${product == null}">
                <input type="hidden" name="action" value="insert">
            </c:if>
            
            <div class="form-group">
                <label>Name:</label>
                <input type="text" class="form-control" name="name" 
                       value="${product.name}" required>
            </div>
            
            <div class="form-group">
                <label>Price:</label>
                <input type="number" step="0.01" class="form-control" name="price" 
                       value="${product.price}" required>
            </div>
            
         
            
            <button type="submit" class="btn btn-primary">Save</button>
        </form>
    </div>
</body>
</html>


//------------------product-list

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <title>Product Management</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h2 class="text-center">Product List</h2>
        <a href="products?action=new" class="btn btn-success mb-3">Add New Product</a>
        
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Price</th>
                  
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach items="${products}" var="product">
                    <tr>
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>$${product.price}</td>
                        
                        <td>
                            <a href="products?action=edit&id=${product.id}" class="btn btn-primary">Edit</a>
                            <a href="products?action=delete&id=${product.id}" class="btn btn-danger">Delete</a>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>
</body>
</html>
